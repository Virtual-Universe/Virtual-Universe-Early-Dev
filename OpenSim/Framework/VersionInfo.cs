/// <license>
///     Copyright (c) Contributors, https://virtual-planets.org/
///     See CONTRIBUTORS.TXT for a full list of copyright holders.
///     For an explanation of the license of each contributor and the content it
///     covers please see the Licenses directory.
///
///     Redistribution and use in source and binary forms, with or without
///     modification, are permitted provided that the following conditions are met:
///         * Redistributions of source code must retain the above copyright
///         notice, this list of conditions and the following disclaimer.
///         * Redistributions in binary form must reproduce the above copyright
///         notice, this list of conditions and the following disclaimer in the
///         documentation and/or other materials provided with the distribution.
///         * Neither the name of the Virtual Universe Project nor the
///         names of its contributors may be used to endorse or promote products
///         derived from this software without specific prior written permission.
///
///     THIS SOFTWARE IS PROVIDED BY THE DEVELOPERS ``AS IS'' AND ANY
///     EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
///     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
///     DISCLAIMED. IN NO EVENT SHALL THE CONTRIBUTORS BE LIABLE FOR ANY
///     DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
///     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
///     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
///     ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
///     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
///     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
/// </license>

using System;
using System.IO;
using System.Reflection;

/// <summary>
/// Using a * for the third number means auto-fill 
/// with the # days since 2000. Good for us here.
/// That only leaves us with two in front, so we 
/// will divide the first number by 10.
/// i.e. 2.001.R in the assembly is presented as 0.2.001.R
/// 
/// Do not provide AssemblyFileVersion and it will be kept in sync.
/// </summary>
[assembly: AssemblyVersion("2.001.*")]

namespace OpenSim
{
    public class VersionInfo
    {
        /// <summary>
        /// This is name of the software product 
        /// (separate from the grid it is running on).
        /// This should not be changed.
        /// </summary>
        public readonly static string SoftwareName = "Universe";

        private static string _version = null;  // Change the AssemblyVersion above.
        private static string _revision = null; // Autogenerated by the build process due to '*'.

        private static string _Initialize()
        {
            if (_revision == null)
            {
                UInt32 days;
                System.Version ver = typeof(VersionInfo).Assembly.GetName().Version;
                _version = String.Format("{0}.{1}.{2}", ver.Major / 10, ver.Major % 10, ver.Minor);
                _revision = ver.Build.ToString();

                try
                {
                    days = Convert.ToUInt32(_revision);
                    System.DateTime exeDate = new DateTime(2000, 1, 1, 0, 0, 0, DateTimeKind.Local).AddDays(days);
                    _revision = exeDate.ToString("yyMMdd");
                }
                catch (Exception)
                {
                }
            }

            return _revision;
        }

        public static string Revision
        {
            get
            {
                _Initialize();
                return _revision;
            }
        }

        /// <summary>
        /// This is the short version, such as 
        /// "Universe 1.2.3", without revision info.
        /// </summary>
        public static string ShortVersion
        {
            get
            {
                _Initialize();
                return SoftwareName + " " + _version;
            }
        }

        /// <summary>
        /// This is the full version, with revision 
        /// info, such as "Universe 1.2.3 R151131".
        /// This is the one requested by most of the 
        /// software, and passed in RegionInfo to viewers.
        /// </summary>
        public static string Version
        {
            get
            {
                _Initialize();
                return ShortVersion + " R" + Revision;
            }
        }

        /// <summary>
        /// This is the external interface version.  
        /// It is separate from the externally-visible version info.
        /// 
        /// This version number should be increased by 1 every 
        /// time a code change makes the previous revision incompatible
        /// with the new revision.  This will usually be due 
        /// to interregion or grid facing interface changes.
        /// 
        /// Changes which are compatible with an older revision 
        /// (e.g. older revisions experience degraded functionality
        /// but not outright failure) do not need a version number increment.
        /// 
        /// Having this version number allows the grid 
        /// service to reject connections from regions running a version
        /// of the code that is too old. 
        /// </summary>
        public readonly static int MajorInterfaceVersion = 7;
    }
}
